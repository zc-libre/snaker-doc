(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{552:function(e,v,t){"use strict";t.r(v);var _=t(9),a=Object(_.a)({},(function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"自定义节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义节点"}},[e._v("#")]),e._v(" 自定义节点")]),e._v(" "),t("p",[e._v("snaker的自定义节点可完成流程的全自动编排。只需要在自定义节点模型中配置处理类即可。")]),e._v(" "),t("p",[e._v("自定义节点的处理类有两种方式：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("实现IHandler接口")])])]),e._v(" "),t("p",[e._v("只需要配置"),t("code",[e._v("clazz")]),e._v("属性即可")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("普通java类")])])]),e._v(" "),t("p",[e._v("需要设置"),t("code",[e._v("clazz")]),e._v(" "),t("code",[e._v("methodName")]),e._v(" "),t("code",[e._v("args")]),e._v(" "),t("code",[e._v("var")])]),e._v(" "),t("p",[e._v("自定义节点的执行不需要外部触发，只要抵达节点立即执行绑定的类进行处理。并记录历史任务，处理类返回值保存在历史任务的变量字段中")])])}),[],!1,null,null,null);v.default=a.exports}}]);